(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{377:function(n,t,e){"use strict";e.r(t);var a=e(7),i=Object(a.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("创建状态依赖类的最简单方法通常是在类库中现有状态依赖类的基础上进行构造。")]),n._v(" "),t("h2",{attrs:{id:"_1-状态依赖性的管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-状态依赖性的管理"}},[n._v("#")]),n._v(" 1. 状态依赖性的管理")]),n._v(" "),t("p",[n._v("依赖状态的操作可以一直阻塞直到可以继续执行，这比使它们先失败再实现起来要更为方便且更不容易出错。")]),n._v(" "),t("p",[n._v("接下来介绍有界缓存的几种实现，其中将采用不同的方法来处理前提条件失败的问题，在每种实现中都扩展了程序清单14-2的"),t("code",[n._v("BaseBoundedBuffer")]),n._v("，在这个类中实现了一个基于数组的循环缓存，其中各个缓存状态变量均由缓存的内置锁来保护。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("****** 程序清单14-2 有界缓存实现的基类 ******\n\npublic abstract class BaseBoundedBuffer<V>{\n    private final V[] buf;\n    private int tail;\n    private int head;\n    private int count;\n\n    protected BaseBoundedBuffer(int capacity){\n        this.buf = (V[]) new Object[capacity];\n    }\n\n    protected synchronized final void doPut(V v){\n        buf[tail] = v;\n        if(++tail == buf.length){\n            tail = 0;\n        }\n        ++count;\n    }\n\n    protected synchronized final V doTake(){\n        V v = buf[head];\n        buf[head] = null;\n        if(++head == buf.length){\n            head = 0;\n        }\n        --count;\n        return v;\n    }\n    \n    protected synchronized final boolean isFull(){\n        return count == buf.length;\n    }\n    \n    protected synchronized final boolean isEmpty(){\n        return count == 0;\n    }\n}\n")])])]),t("h3",{attrs:{id:"_1-1-将前提条件的失败传递给调用者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-将前提条件的失败传递给调用者"}},[n._v("#")]),n._v(" 1.1 将前提条件的失败传递给调用者")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("****** 程序清单14-3 当不满足前提条件时,有界缓存不会执行相应的操作 ******\n\npublic class GrumpyBoundedBuffer<V> extends BaseBoundedBuffer<V>{\n\n    protected GrumpyBoundedBuffer(int capacity) {\n        super(capacity);\n    }\n    \n    public synchronized void put(V v) throws BufferFullException{\n        if(isFull())\n            throw new BufferFullException();\n        doPut(v);\n    }\n    \n    public synchronized V take() throws BufferEmptyException{\n        if(isEmpty())\n            throw new BufferEmptyException();\n        return doTake();\n    }\n}\n")])])]),t("p",[n._v("缺点：调用者必须自行处理前提条件失败的情况。")]),n._v(" "),t("h3",{attrs:{id:"_1-2-通过轮询与休眠来实现简单的阻塞"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-通过轮询与休眠来实现简单的阻塞"}},[n._v("#")]),n._v(" 1.2 通过轮询与休眠来实现简单的阻塞")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("****** 程序清单14-5 使用简单的阻塞实现的有界缓存 ******\n\npublic class SleepyBoundedBuffer<V> extends BaseBoundedBuffer<V>{\n\n    protected SleepyBoundedBuffer(int capacity) {\n        super(capacity);\n    }\n    \n    public void put(V v) throws InterruptedException{\n        while (true){\n            synchronized (this){\n                if(!isFull()){\n                    doPut(v);\n                    return;\n                }\n            }\n            Thread.sleep(sometime);\n        }\n    }\n    \n    public V take() throws InterruptedException{\n        while (true){\n            synchronized (this){\n                if(!isEmpty())\n                    return doTake();\n            }\n            Thread.sleep(sometime);\n        }\n    }\n}\n")])])]),t("p",[n._v("在程序清单14-5中，如果前提条件失败,那么当前线程将释放锁并休眠一段时间，从而使其他线程能够访问缓存。当线程醒来后，重新请求锁并尝试执行操作，如此往复便初步实现了阻塞操作。")]),n._v(" "),t("p",[n._v("上述缓存实现的不足之处：当线程判断前提条件失败后，会休眠固定的时间，而无法立即被唤醒来实现即时响应。")]),n._v(" "),t("h3",{attrs:{id:"_1-3-条件队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-条件队列"}},[n._v("#")]),n._v(" 1.3 条件队列")]),n._v(" "),t("p",[n._v("“条件队列”这个名字来源于：它使得一组线程能够通过某种方式来等待特定的条件变成真。传统队列的元素是一个个数据，而条件队列中的元素是一个个正在等待相关条件的线程。")]),n._v(" "),t("p",[n._v("条件队列与”休眠”机制相比，本质的语义是相同的，只是在多个方面进行了优化：CPU效率、上下文切换开销和响应性等。如果某个功能无法通过”轮询和休眠”来实现，那么使用条件队列也无法实现。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("****** 程序清单14-6 使用条件队列实现的有界缓存 ******\n\npublic class BoundedBuffer<V> extends BaseBoundedBuffer<V>{\n\n    protected BoundedBuffer(int capacity) {\n        super(capacity);\n    }\n    \n    public synchronized void put(V v) throws InterruptedException{\n        while (isFull())\n            wait();\n        doPut(v);\n        notifyAll();\n    }\n    \n    public synchronized V take() throws InterruptedException{\n        while (isEmpty())\n            wait();\n        V v = doTake();\n        notifyAll();\n        return v;\n    }\n}\n")])])]),t("h2",{attrs:{id:"_2-使用条件队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用条件队列"}},[n._v("#")]),n._v(" 2. 使用条件队列")]),n._v(" "),t("h3",{attrs:{id:"_2-1-条件谓词"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-条件谓词"}},[n._v("#")]),n._v(" 2.1 条件谓词")]),n._v(" "),t("p",[n._v("在条件等待中存在一种重要的三元关系：加锁、wait方法和一个条件谓词。")]),n._v(" "),t("p",[n._v("在条件谓词中包含多个状态变量，而状态变量由一个锁来保护，因此在测试条件谓词之前必须先持有这个锁。锁对象与条件队列对象（即调用wait和notifyAll等方法所在的对象）必须是同一个对象。")]),n._v(" "),t("h3",{attrs:{id:"_2-2-过早唤醒"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-过早唤醒"}},[n._v("#")]),n._v(" 2.2 过早唤醒")]),n._v(" "),t("p",[n._v("当使用条件等待时，通常都有一个条件谓词，包括一些对象状态的测试，线程在执行前必须首先通过这些测试。")]),n._v(" "),t("p",[n._v("在调用wait之前测试条件谓词，并且从wait中返回时再次进行测试。")]),n._v(" "),t("p",[n._v("在一个循环中调用wait。")]),n._v(" "),t("p",[n._v("确保使用与条件队列相关的锁来保护构成条件谓词的各个状态变量。")]),n._v(" "),t("p",[n._v("当调用"),t("code",[n._v("wait/notify/notifyAll")]),n._v("方法时，一定要持有与条件队列相关的锁。")]),n._v(" "),t("p",[n._v("在检查条件谓词之后以及开始执行相应的操作之前，不要释放锁。")]),n._v(" "),t("h3",{attrs:{id:"_2-3-丢失的信号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-丢失的信号"}},[n._v("#")]),n._v(" 2.3 丢失的信号")]),n._v(" "),t("p",[n._v("丢失的信号是指线程必须等待一个已经为真的条件，但是在开始等待之前没有检查条件谓词。")]),n._v(" "),t("p",[n._v("如果线程a通知了一个条件队列，而线程b随后在这个条件队列上等待，那么线程b不会立即醒来，而是需要另一个通知来唤醒它。")]),n._v(" "),t("h3",{attrs:{id:"_2-4-通知"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-通知"}},[n._v("#")]),n._v(" 2.4 通知")]),n._v(" "),t("p",[n._v("每当在等待一个条件时，一定要确保在条件谓词变为真时通过某种方式发出通知。发出通知的线程应该尽快地释放锁，从而确保正在等待的线程尽可能快地解除阻塞.")]),n._v(" "),t("p",[t("code",[n._v("notify")]),n._v("与"),t("code",[n._v("notifyAll")]),n._v("相比，单一的"),t("code",[n._v("notify")]),n._v("通知很容易导致类似于信号丢失的问题。")]),n._v(" "),t("p",[n._v("只有在同时满足以下两个条件时，才能使用单一的"),t("code",[n._v("notify")]),n._v("而不是"),t("code",[n._v("notifyAll")]),n._v("：")]),n._v(" "),t("ol",[t("li",[n._v("所有等待线程的类型都相同，只有一个条件谓词与条件队列相关，并且每个线程在从"),t("code",[n._v("wait")]),n._v("返回后都将执行相同的操作。")]),n._v(" "),t("li",[n._v("单进单出。在条件变量上的每次通知，最多只能唤醒一个线程来执行。")])]),n._v(" "),t("h3",{attrs:{id:"_2-5-阀门类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-阀门类"}},[n._v("#")]),n._v(" 2.5 阀门类")]),n._v(" "),t("p",[n._v("闭锁机制存在的一个缺陷：阀门在打开后无法重新关闭。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("****** 程序清单14-9 使用wait和notifyAll来实现可重新关闭的阀门 ******\n\npublic class ThreadGate{\n    private boolean isOpen;\n    private int generation;\n    \n    public synchronized void close(){\n        isOpen = false;\n    }\n    \n    public synchronized void open(){\n        ++generation;\n        isOpen = true;\n        notifyAll();\n    }\n    \n    public synchronized void await() throws InterruptedException{\n        int arrivalGeneration = generation;\n        while (!isOpen && arrivalGeneration==generation)\n            wait();\n    }\n}\n")])])]),t("h3",{attrs:{id:"_2-6-子类的安全问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-子类的安全问题"}},[n._v("#")]),n._v(" 2.6 子类的安全问题")]),n._v(" "),t("p",[n._v("对于状态依赖的类，要么将其等待和通知等协议完全向子类公开，要么完全阻止子类参与到等待和通知等过程中。")]),n._v(" "),t("h2",{attrs:{id:"_3-显式的condition对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-显式的condition对象"}},[n._v("#")]),n._v(" 3. 显式的Condition对象")]),n._v(" "),t("p",[n._v("Condition比内置条件队列提供了更丰富的功能：在每个锁上可存在多个等待/条件等待可以是可中断的，基于时限的等待，以及公平的或非公平的队列操作。")]),n._v(" "),t("p",[n._v("在Condition中，与"),t("code",[n._v("wait、notify、notifyAll")]),n._v("方法对应的分别是"),t("code",[n._v("await、signal、signalAll")]),n._v("。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("****** 程序清单14-11 使用显式条件变量的有界缓存 ******\n\npublic abstract class ConditionBoundedBuffer<V>{\n    private final V[] buf;\n    private int tail,head,count;\n    protected final Lock lock = new ReentrantLock();\n    protected final Condition notFull = lock.newCondition();\n    protected final Condition notEmpty = lock.newCondition();\n    \n    \n    protected ConditionBoundedBuffer(int capacity){\n        this.buf = (V[]) new Object[capacity];\n    }\n\n    protected void put(V v) throws InterruptedException {\n        lock.lock();\n        try{\n            while (count == buf.length)\n                notFull.await();\n            buf[tail] = v;\n            if(++tail == buf.length){\n                tail = 0;\n            }\n            ++count;\n            notEmpty.signalAll();\n        }finally {\n            lock.unlock();\n        }\n        \n    }\n\n    protected V take() throws InterruptedException {\n        lock.lock();\n        try{\n            while (count == 0)\n                notEmpty.await();\n            V v = buf[head];\n            buf[head] = null;\n            if(++head == buf.length){\n                head = 0;\n            }\n            --count;\n            notFull.signalAll();\n            return v;\n        }finally {\n            lock.unlock();\n        }\n    }\n\n}\n")])])]),t("h2",{attrs:{id:"_4-synchronizer剖析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-synchronizer剖析"}},[n._v("#")]),n._v(" 4. Synchronizer剖析")]),n._v(" "),t("p",[n._v("在"),t("code",[n._v("ReentrantLock")]),n._v("和"),t("code",[n._v("Semaphore")]),n._v("这两个接口之间存在许多共同点，都可以作为一个”阀门”，即每次只允许一定数量的线程通过，并且都支持可中断的/不可中断的以及限时的获取操作，并且也都支持等待线程执行公平或者非公平的队列操作。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("****** 程序清单14-12 使用Lock来实现信号量 ******\n\npublic class SemphoreOnLock{\n    private final Lock lock = new ReentrantLock();\n    private final Condition permissionAvailable = lock.newCondition();\n    private int permits;\n    \n    SemphoreOnLock(int initialPermits){\n        lock.lock();\n        try {\n            permits = initialPermits\n        } finally {\n            lock.unlock();\n        }\n    }\n    \n    public void acquire() throws InterruptedException {\n        lock.lock();\n        try{\n            while (permits<=0)\n                permissionAvailable.await();\n            --permits;\n        } finally {\n            lock.unlock();\n        }\n    }\n    \n    public void release(){\n        lock.lock();\n        try{\n            ++permits;\n            permissionAvailable.signalAll();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n")])])]),t("h2",{attrs:{id:"_5-abstractqueuedsynchronized"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-abstractqueuedsynchronized"}},[n._v("#")]),n._v(" 5. AbstractQueuedSynchronized")]),n._v(" "),t("p",[n._v("AQS是一个用于构建锁和同步器的框架，许多同步工具都是基于AQS构建的，如: "),t("code",[n._v("ReentrantLock")]),n._v("、"),t("code",[n._v("Semphore")]),n._v("、"),t("code",[n._v("CountDownLatch")]),n._v("、"),t("code",[n._v("ReentrantWriteLock")]),n._v("、"),t("code",[n._v("Synchronous")]),n._v("和"),t("code",[n._v("FutureTask")]),n._v("。")]),n._v(" "),t("p",[n._v("在基于AQS构建的同步容器类中，最基本的操作包括各种形式的获取操作和释放操作。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("****** 程序清单14-14 使用AQS实现的二元闭锁 ******\n\npublic class OneShotLatch{\n    private final Sync sync = new Sync();\n    \n    public void signal(){\n        sync.releaseShared(0);\n    }\n    \n    public void await() throws InterruptedException {\n        sync.acquireSharedInterruptibly(0);\n    }\n    \n    private class Sync extends AbstractQueuedSynchronizer{\n        @Override\n        protected int tryAcquireShared(int arg) {\n            return (getState()==1)?1:-1;\n        }\n\n        @Override\n        protected boolean tryReleaseShared(int arg) {\n            setState(1);\n            return true;\n        }\n    }\n}\n")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);