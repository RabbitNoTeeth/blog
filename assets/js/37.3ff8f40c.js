(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{325:function(a,e,s){"use strict";s.r(e);var t=s(7),v=Object(t.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[e("code",[a._v("Dockerfile")]),a._v(" 是一个文本文件，它包含了所有用来组建镜像的可执行的命令。通过 "),e("code",[a._v("docker build")]),a._v(" 指令可以从 "),e("code",[a._v("Dockerfile")]),a._v(" 来构建镜像。")]),a._v(" "),e("p",[e("code",[a._v("Dockerfile")]),a._v(" 由一系列指令构成，来定义构建镜像的步骤，文件书写格式为：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("指令 参数\n")])])]),e("p",[a._v("指令不对大小写敏感，但是还是建议使用大写格式。")]),a._v(" "),e("p",[a._v("docker按顺序执行 "),e("code",[a._v("Dockerfile")]),a._v(" 中的指令。"),e("code",[a._v("Dockerfile")]),a._v(" 必须以 "),e("code",[a._v("FROM")]),a._v(" 指令开始。 "),e("code",[a._v("FROM")]),a._v(" 指令前可以有一个或者多个 "),e("code",[a._v("ARG")]),a._v(" 指令，这些 "),e("code",[a._v("ARG")]),a._v(" 指令声明了在 "),e("code",[a._v("FROM")]),a._v(" 指令中用到的参数。")]),a._v(" "),e("p",[e("code",[a._v("Dockerfile")]),a._v(" 中，以 "),e("code",[a._v("#")]),a._v(" 开头的行被视作注释，在加载时，注释行将被忽略。")]),a._v(" "),e("p",[e("code",[a._v("Dockerfile")]),a._v(" 支持如下指令：")]),a._v(" "),e("h2",{attrs:{id:"from"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#from"}},[a._v("#")]),a._v(" FROM")]),a._v(" "),e("p",[a._v("指定基础镜像（即当前镜像是基于哪个镜像构建）。")]),a._v(" "),e("br"),a._v(" "),e("p",[e("strong",[a._v("格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("FROM [--platform=<platform>] <image> [AS <name>]\n")])])]),e("p",[a._v("或者")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("FROM [--platform=<platform>] <image>[:<tag>] [AS <name>]\n")])])]),e("p",[a._v("或者")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("FROM [--platform=<platform>] <image>[@<digest>] [AS <name>]\n")])])]),e("br"),a._v(" "),e("p",[e("strong",[a._v("注意：")])]),a._v(" "),e("ul",[e("li",[a._v("只有 "),e("code",[a._v("ARG")]),a._v(" 指令能够声明在 "),e("code",[a._v("FROM")]),a._v(" 指令前面。")]),a._v(" "),e("li",[a._v("可以存在多个 "),e("code",[a._v("FROM")]),a._v(" 指令，用来创建多个镜像或者作为不同的构建阶段。每个 "),e("code",[a._v("FROM")]),a._v(" 指令执行，都会清除上一个 "),e("code",[a._v("FROM")]),a._v(" 指令创建的所有状态。")]),a._v(" "),e("li",[a._v("可以在 "),e("code",[a._v("FROM")]),a._v(" 指令后添加 "),e("code",[a._v("AS name")]),a._v(" 来赋予构建出的镜像一个名称，在当前 Dockerfile 的后续 "),e("code",[a._v("FROM")]),a._v(" 指令和 "),e("code",[a._v("COPY --from=<name>")]),a._v(" 指令可以通过该名称引用到其表示的镜像。")]),a._v(" "),e("li",[e("code",[a._v("tag")]),a._v(" 或 "),e("code",[a._v("digest")]),a._v(" 的值是可选的，如果未指定，那么将使用 "),e("code",[a._v("latest")]),a._v(" 作为默认值。")])]),a._v(" "),e("br"),a._v(" "),e("p",[e("strong",[a._v("示例：")])]),a._v(" "),e("p",[a._v("在下面的示例中，"),e("code",[a._v("FROM")]),a._v(" 指令和 "),e("code",[a._v("RUN")]),a._v(" 指令都要引用参数 VERSION，但只有 "),e("code",[a._v("FROM")]),a._v(" 指令能够成功，RUN 指令会失败，这是 "),e("code",[a._v("FROM")]),a._v(" 执行后会清除其之前的状态：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ARG VERSION=latest\nFROM busybox:$VERSION\nRUN echo $VERSION > image_version\n")])])]),e("p",[a._v("如果想要在多个指令中引用 FROM 指令之前声明的变量，那么可以通过再次声明不带有默认值的变量的形式：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ARG VERSION=latest\nFROM busybox:$VERSION\nARG VERSION\nRUN echo $VERSION > image_version\n")])])]),e("h2",{attrs:{id:"arg"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arg"}},[a._v("#")]),a._v(" ARG")]),a._v(" "),e("p",[a._v("声明参数，"),e("strong",[a._v("通过 "),e("code",[a._v("ARG")]),a._v(" 声明的参数仅作用于镜像的构建阶段，在容器运行阶段是无法获取到其声明的参数的")]),a._v("。")]),a._v(" "),e("br"),a._v(" "),e("p",[e("strong",[a._v("格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ARG name[=value]\n")])])]),e("br"),a._v(" "),e("p",[e("strong",[a._v("示例：")])]),a._v(" "),e("ul",[e("li",[e("p",[a._v("声明一个未赋值的参数")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ARG user\n")])])])]),a._v(" "),e("li",[e("p",[a._v("声明一个参数并赋值")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ARG user=liuxindong\n")])])])]),a._v(" "),e("li",[e("p",[a._v("使用参数")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ARG parent_image=jdk1.8\nFROM $parent_image\n")])])])])]),a._v(" "),e("h2",{attrs:{id:"env"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#env"}},[a._v("#")]),a._v(" ENV")]),a._v(" "),e("p",[a._v("设置环境变量，"),e("strong",[a._v("通过 "),e("code",[a._v("ENV")]),a._v(" 声明的变量不仅作用于镜像的构建阶段，在容器运行阶段是也可以获取到")]),a._v("。")]),a._v(" "),e("p",[e("strong",[a._v("建议：")]),a._v(" 如果只是在构建阶段使用的变量，那么用 "),e("code",[a._v("ARG")]),a._v(" 来声明，否则用 "),e("code",[a._v("ENV")]),a._v(" 来声明。")]),a._v(" "),e("br"),a._v(" "),e("p",[e("strong",[a._v("格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ENV <key>=<value> ...\n")])])]),e("br"),a._v(" "),e("p",[a._v("如果某些特殊字符不经过转义，那么变量的声明将被打断。可以通过反斜杠或者双引号在变量值中使用空白字符。如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('ENV MY_NAME="John Doe"\nENV MY_DOG=Rex\\ The\\ Dog\nENV MY_CAT=fluffy\n')])])]),e("p",[a._v("可在一个"),e("code",[a._v("ENV")]),a._v("指令中声明多个变量：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('ENV MY_NAME="John Doe" MY_DOG=Rex\\ The\\ Dog \\\n    MY_CAT=fluffy\n')])])]),e("p",[a._v("通过 "),e("code",[a._v("ENV")]),a._v(" 声明的变量会持久化到该镜像的容器中，可以通过 "),e("code",[a._v("docker inspect")]),a._v(" 来查看，并且可通过 "),e("code",[a._v("docker run --env <key>=<value>")]),a._v(" 来修改。")]),a._v(" "),e("h2",{attrs:{id:"workdir"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#workdir"}},[a._v("#")]),a._v(" WORKDIR")]),a._v(" "),e("p",[a._v("为 "),e("code",[a._v("RUN")]),a._v(", "),e("code",[a._v("CMD")]),a._v(", "),e("code",[a._v("ENTRYPOINT")]),a._v(", "),e("code",[a._v("COPY")]),a._v(" 和 "),e("code",[a._v("ADD")]),a._v(" 这些指令设置工作目录。")]),a._v(" "),e("br"),a._v(" "),e("p",[e("strong",[a._v("格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("WORKDIR /path/to/workdir\n")])])]),e("br"),a._v(" "),e("p",[e("strong",[a._v("示例：")])]),a._v(" "),e("p",[e("code",[a._v("WORKDIR")]),a._v(" 指令可声明多次，如果声明时使用的是相对路径，那么将表示相对于上一个 "),e("code",[a._v("WORKDIR")]),a._v(" 声明的路径，比如下面的示例：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("WORKDIR /a\nWORKDIR b\nWORKDIR c\nRUN pwd\n")])])]),e("p",[e("code",[a._v("pwd")]),a._v("命令运行后的输出文件所在目录为  "),e("code",[a._v("/a/b/c")]),a._v(" 。")]),a._v(" "),e("p",[e("code",[a._v("WORKDIR")]),a._v(" 指令可以解析 "),e("code",[a._v("ENV")]),a._v(" 声明的变量，如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ENV DIRPATH=/path\nWORKDIR $DIRPATH/$DIRNAME\nRUN pwd\n")])])]),e("p",[e("code",[a._v("pwd")]),a._v("命令运行后的输出文件所在目录为  "),e("code",[a._v("/path/$DIRNAME")]),a._v(" 。")]),a._v(" "),e("h2",{attrs:{id:"copy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#copy"}},[a._v("#")]),a._v(" COPY")]),a._v(" "),e("p",[a._v("拷贝宿主机中文件、文件夹到容器中。")]),a._v(" "),e("br"),a._v(" "),e("p",[e("strong",[a._v("格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("COPY [--chown=<user>:<group>] <src>... <dest>\n")])])]),e("p",[a._v("或")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('COPY [--chown=<user>:<group>] ["<src>",... "<dest>"]\n')])])]),e("br"),a._v(" "),e("p",[e("strong",[a._v("示例：")])]),a._v(" "),e("ul",[e("li",[e("p",[a._v("拷贝宿主机中/home/aaa.tar文件到容器中的/home目录下")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("COPY /home/aaa.tar /home\n")])])])]),a._v(" "),e("li",[e("p",[a._v("拷贝宿主机中多个文件到容器/home目录下")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("COPY /home/aaa.tar /home/bbb.tar /home/  # 拷贝多个文件时，容器目录必须以/结尾\n")])])])]),a._v(" "),e("li",[e("p",[a._v("拷贝宿主机文件到容器当前路径（"),e("code",[a._v("WORKDIR")]),a._v(" 声明的路径）的deploy目录下")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("COPY /home/aaa.tar ./deploy\n")])])])]),a._v(" "),e("li",[e("p",[a._v("宿主机文件支持通配符，其使用的是Go语言的 "),e("a",{attrs:{href:"http://golang.org/pkg/path/filepath#Match",target:"_blank",rel:"noopener noreferrer"}},[a._v("filepath.Match"),e("OutboundLink")],1),a._v(" 规则")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("COPY hom* /mydir/\t\t# 拷贝所有以 hom 开头的文件\nCOPY hom?.txt /mydir/ \t# 拷贝所有以 hom 开头的txt文件\n")])])])])]),a._v(" "),e("h2",{attrs:{id:"add"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[a._v("#")]),a._v(" ADD")]),a._v(" "),e("p",[a._v("拷贝宿主机中文件、文件夹或者远程文件到容器中。如果拷贝的是tar文件，那么拷贝到容器中后会自动解压。")]),a._v(" "),e("p",[e("strong",[e("code",[a._v("ADD")]),a._v("与 "),e("code",[a._v("COPY")]),a._v(" 的区别：")])]),a._v(" "),e("ul",[e("li",[a._v("支持远程文件")]),a._v(" "),e("li",[a._v("如果是tar文件，拷贝完成后自动解压")])]),a._v(" "),e("br"),a._v(" "),e("p",[e("strong",[a._v("格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ADD [--chown=<user>:<group>] <src>... <dest>\n")])])]),e("p",[a._v("或")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('ADD [--chown=<user>:<group>] ["<src>",... "<dest>"]\n')])])]),e("br"),a._v(" "),e("p",[a._v("示例可参考 "),e("code",[a._v("COPY")]),a._v(" 指令")]),a._v(" "),e("h2",{attrs:{id:"expose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expose"}},[a._v("#")]),a._v(" EXPOSE")]),a._v(" "),e("p",[a._v("声明容器可对外开放的端口。")]),a._v(" "),e("br"),a._v(" "),e("p",[e("strong",[a._v("格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("EXPOSE <port> [<port>/<protocol>...]\n")])])]),e("br"),a._v(" "),e("p",[e("strong",[a._v("示例：")])]),a._v(" "),e("p",[a._v("可以对端口协议进行标识，来区分是 UDP 还是 TCP，当不进行特殊标识时，默认为 TCP。如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("EXPOSE 8080\t\t\t\t  # 监听8080端口，tcp协议\nEXPOSE 8081/tcp\t\t\t# 监听8081端口，tcp协议\nEXPOSE 8082/udp\t\t\t# 监听8082端口，udp协议\nEXPOSE 8083/tcp\t\t\t# 监听8083端口，tcp协议\nEXPOSE 8083/udp\t\t\t# 监听8083端口，udp协议\n")])])]),e("br"),a._v(" "),e("p",[e("strong",[a._v("注意：")])]),a._v(" "),e("p",[e("code",[a._v("EXPOSE")]),a._v(" 仅仅是声明容器可对外开发的端口，但是并没有直接对外开放，容器启动后，如果需要允许外部访问，仍需要在 "),e("code",[a._v("docker run")]),a._v(" 或者 "),e("code",[a._v("docker create")]),a._v(" 时，通过 "),e("code",[a._v("-p")]),a._v(" 参数来进行端口映射实现对外开放")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker run -p 8080:8080 -p 8081:8081/tcp -p 8082:8082/udp ...\n")])])]),e("h2",{attrs:{id:"run"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[a._v("#")]),a._v(" RUN")]),a._v(" "),e("p",[a._v("声明在"),e("strong",[a._v("构建阶段")]),a._v("要执行的命令，这些命令执行完成后的结果可在后续的构建过程中使用。")]),a._v(" "),e("br"),a._v(" "),e("p",[e("strong",[a._v("格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("RUN <command>    # shell格式\n")])])]),e("p",[a._v("或")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('RUN ["executable", "param1", "param2"]     # exec格式\n')])])]),e("br"),a._v(" "),e("p",[e("strong",[a._v("示例：")])]),a._v(" "),e("ul",[e("li",[e("p",[a._v("shell格式")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("RUN mkdir -p /home/aaa\n")])])])]),a._v(" "),e("li",[e("p",[a._v("exec格式")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('RUN ["mkdir", "-p", "/home/aaa"]\n')])])])])]),a._v(" "),e("br"),a._v(" "),e("p",[e("strong",[a._v("注意：")])]),a._v(" "),e("ul",[e("li",[e("p",[a._v("使用exec格式时，要处理好字符的转义问题，如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('RUN ["c:\\windows\\system32\\tasklist.exe"]\n')])])]),e("p",[a._v("上述声明存在字符未转义问题，正确写法为：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('RUN ["c:\\\\windows\\\\system32\\\\tasklist.exe"]\n')])])])]),a._v(" "),e("li",[e("p",[a._v("使用shell格式时，可通过 "),e("code",[a._v("\\")]),a._v(" 来实现换行，如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("RUN /bin/bash -c 'source $HOME/.bashrc; \\\necho $HOME'\n")])])]),e("p",[a._v("等价于")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("RUN /bin/bash -c 'source $HOME/.bashrc; echo $HOME'\n")])])])])]),a._v(" "),e("h2",{attrs:{id:"cmd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[a._v("#")]),a._v(" CMD")]),a._v(" "),e("p",[a._v("定义容器启动后要执行的命令。可以声明多个 "),e("code",[a._v("CMD")]),a._v(" 指令，但是只有最后一个生效。")]),a._v(" "),e("br"),a._v(" "),e("p",[e("strong",[a._v("格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('CMD ["executable","param1","param2"]     # exec格式（官方推荐）\n')])])]),e("p",[a._v("或者")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("CMD command param1 param2    # shell格式\n")])])]),e("br"),a._v(" "),e("p",[e("strong",[a._v("示例：")])]),a._v(" "),e("ul",[e("li",[e("p",[a._v("shell格式")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("CMD mkdir -p /home/aaa\n")])])])]),a._v(" "),e("li",[e("p",[a._v("exec格式")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('CMD ["mkdir", "-p", "/home/aaa"]\n')])])])])]),a._v(" "),e("br"),a._v(" "),e("p",[e("code",[a._v("CMD")]),a._v(" 定义的命令可以被 "),e("code",[a._v("docker run")]),a._v(" 命令的参数覆盖。")]),a._v(" "),e("p",[a._v("例如我们在Dockerfile文件中定义：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('CMD ["/bin/echo", "i am jack"] \n')])])]),e("p",[a._v("构建镜像并运行容器：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker build -t myimage && docker run myimage\n")])])]),e("p",[a._v("控制台输出内容为：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("i am jack\n")])])]),e("p",[a._v("如果我们 "),e("code",[a._v("docker run")]),a._v(" 命令中指定参数，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker runmyimage /bin/bash\n")])])]),e("p",[a._v("那么命令行将不再有输出，也就是 "),e("code",[a._v("CMD")]),a._v(" 定义的命令被覆盖了。")]),a._v(" "),e("br"),a._v(" "),e("p",[e("strong",[a._v("注意：")])]),a._v(" "),e("ul",[e("li",[e("p",[a._v("使用exec格式时，要处理好字符的转义问题，如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('CMD ["c:\\windows\\system32\\tasklist.exe"]\n')])])]),e("p",[a._v("上述声明存在字符未转义问题，正确写法为：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('CMD ["c:\\\\windows\\\\system32\\\\tasklist.exe"]\n')])])])]),a._v(" "),e("li",[e("p",[a._v("使用shell格式时，可通过 "),e("code",[a._v("\\")]),a._v(" 来实现换行，如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("CMD /bin/bash -c 'source $HOME/.bashrc; \\\necho $HOME'\n")])])]),e("p",[a._v("等价于")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("CMD /bin/bash -c 'source $HOME/.bashrc; echo $HOME'\n")])])])])]),a._v(" "),e("h2",{attrs:{id:"entrypoint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint"}},[a._v("#")]),a._v(" ENTRYPOINT")]),a._v(" "),e("p",[a._v("定义容器启动后要执行的命令。可以声明多个 "),e("code",[a._v("ENTRYPOINT")]),a._v(" 指令，但是只有最后一个生效。")]),a._v(" "),e("br"),a._v(" "),e("p",[e("strong",[a._v("格式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('ENTRYPOINT ["executable","param1","param2"]     # exec格式（官方推荐）\n')])])]),e("p",[a._v("或者")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ENTRYPOINT command param1 param2    # shell格式\n")])])]),e("br"),a._v(" "),e("p",[e("strong",[a._v("示例：")])]),a._v(" "),e("ul",[e("li",[e("p",[a._v("shell格式")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ENTRYPOINT mkdir -p /home/aaa\n")])])])]),a._v(" "),e("li",[e("p",[a._v("exec格式")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('ENTRYPOINT ["mkdir", "-p", "/home/aaa"]\n')])])])])]),a._v(" "),e("br"),a._v(" "),e("p",[a._v("当使用exec格式时， 可以通过 "),e("code",[a._v("docker run")]),a._v(" 命令的 "),e("code",[a._v("--entrypoint")]),a._v(" 参数来覆盖  "),e("code",[a._v("ENTRYPOINT")]),a._v(" 指令定义的命令，如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker run myimage --entrypoint /bin/bash\n")])])]),e("p",[a._v("此时， "),e("code",[a._v("ENTRYPOINT")]),a._v(" 指令定义的命令将会被覆盖成 /bin/bash")]),a._v(" "),e("br"),a._v(" "),e("p",[e("strong",[e("code",[a._v("ENTRYPOINT")]),a._v(" 与 "),e("code",[a._v("CMD")]),a._v(" 的区别：")])]),a._v(" "),e("p",[e("code",[a._v("ENTRYPOINT")]),a._v(" 可以使容器表现得更像是一个可执行程序，例如在Dockerfile文件中定义：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('ENTRYPOINT ["/bin/echo"]\n')])])]),e("p",[a._v("构建后执行：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('docker run myimage "this is a test"\n')])])]),e("p",[a._v("控制台将输出：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("this is a test\n")])])]),e("p",[a._v("看，这个容器就像是一个echo程序一样。")]),a._v(" "),e("br"),a._v(" "),e("p",[a._v("通常， "),e("code",[a._v("ENTRYPOINT")]),a._v(" 和  "),e("code",[a._v("CMD")]),a._v(" 搭配使用， "),e("code",[a._v("ENTRYPOINT")]),a._v(" 来定义固定不变的命令，而 "),e("code",[a._v("CMD")]),a._v(" 来定义可以变化的命令。")]),a._v(" "),e("p",[a._v("例如我们在编写构建一个nodejs服务镜像的Dockerfile文件，有如下定义：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('ENTRYPOINT ["node"]\nCMD ["/home/app1/index.js"]\n')])])]),e("p",[a._v("构建并运行：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker build -t myimage && docker run myimage\n")])])]),e("p",[a._v("那么容器将会启动nodejs服务，并加载 "),e("code",[a._v("/home/app1/index.js")]),a._v(" 文件。")]),a._v(" "),e("p",[a._v("如果我们想要在容器启动时，加载 "),e("code",[a._v("/home/app2")]),a._v(" 下的 "),e("code",[a._v("index.js")]),a._v(" 文件，我们可以执行如下命令：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker run myimage /home/app2/index.js\n")])])]),e("p",[a._v("此时，容器启动后将加载 "),e("code",[a._v("/home/app2/index.js")]),a._v(" 文件。")])])}),[],!1,null,null,null);e.default=v.exports}}]);