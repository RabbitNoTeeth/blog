(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{316:function(t,e,_){"use strict";_.r(e);var a=_(7),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[e("strong",[t._v("垂直分表")]),t._v("：即按行分表。")]),t._v(" "),e("p",[e("strong",[t._v("优点")]),t._v("：")]),t._v(" "),e("ol",[e("li",[t._v("物理分散，逻辑统一。")]),t._v(" "),e("li",[t._v("查询速度大幅提升。")]),t._v(" "),e("li",[t._v("删除数据速度更快。")]),t._v(" "),e("li",[t._v("可以将使用率低的数据通过表空间技术转移到低成本的存储介质上。")])]),t._v(" "),e("p",[t._v("下面通过一个案例来叙述在PostgreSQL中如何垂直分表。")]),t._v(" "),e("blockquote",[e("p",[t._v("公司某项目数据库现有一日志表 t_log，其中存储了程序运行三年来的所有日志数据，数据量非常大，导致查询速度非常慢。现在需要将该表按照年份拆成三个表，即 t_log_2019、t_log_2020、t_log_2021，分表后虽然数据分散存储，但是在查询时要保持逻辑统一，也就是依然只通过 t_log 表进行查询。")])]),t._v(" "),e("h2",{attrs:{id:"_1-创建主表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建主表"}},[t._v("#")]),t._v(" 1. 创建主表")]),t._v(" "),e("p",[t._v("创建主表 t_log ：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("CREATE TABLE tbl_partition\n(\n  id serial8 NOT NULL,\n  error int NULL,\n  content text NULL,\n  created_time timestamp NULL,\n  CONSTRAINT t_log_pkey PRIMARY KEY (id)\n);\n")])])]),e("p",[t._v("💡 Pg11以及更高版本支持对逻辑主表创建立索引，子表自动继承。")]),t._v(" "),e("h2",{attrs:{id:"_2-创建分表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建分表"}},[t._v("#")]),t._v(" 2. 创建分表")]),t._v(" "),e("p",[t._v("分表必须继承主表，同时给分表添加限制（这些限制决定了每张分表允许保存的数据范围，每张表的范围不能重复）。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("CREATE TABLE t_log_2019(CHECK (created_time >= '2019-01-01'::date AND created_time < '2020-01-01'::date)) inherits (t_log);\nCREATE TABLE t_log_2020(CHECK (created_time >= '2020-01-01'::date AND created_time < '2021-01-01'::date)) inherits (t_log);\nCREATE TABLE t_log_2021(CHECK (created_time >= '2021-01-01'::date AND created_time < '2022-01-01'::date)) inherits (t_log);\n")])])]),e("h2",{attrs:{id:"_3-主表创建触发器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-主表创建触发器"}},[t._v("#")]),t._v(" 3. 主表创建触发器")]),t._v(" "),e("p",[t._v("trigger 结合 Function 来实现分区插入：Function 负责根据条件选择插入，trigger 负责自动调用 Function。")]),t._v(" "),e("p",[e("strong",[t._v("创建Function：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("CREATE OR REPLACE FUNCTION t_log_partition_trigger()\n  RETURNS TRIGGER AS $$\nBEGIN\n  IF NEW.created_time >= DATE '2019-01-01' AND NEW.created_time < DATE '2020-01-01'\n  THEN\n    INSERT INTO t_log_2019 VALUES (NEW.*);\n  ELSIF NEW.created_time >= DATE '2020-01-01' AND NEW.created_time < DATE '2021-01-01'\n    THEN\n      INSERT INTO t_log_2020 VALUES (NEW.*);\n  ELSIF NEW.created_time >= DATE '2021-01-01' AND NEW.created_time < DATE '2022-01-01'\n    THEN\n      INSERT INTO t_log_2021 VALUES (NEW.*);\n  END IF;\n  RETURN NULL;\nEND;\n$$\nLANGUAGE plpgsql;\n")])])]),e("p",[e("strong",[t._v("对主表创建触发器：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("CREATE TRIGGER insert_t_log_partition_trigger\nBEFORE INSERT ON t_log\nFOR EACH ROW EXECUTE PROCEDURE t_log_partition_trigger();\n")])])]),e("p",[t._v("✔️ 打完收工！")])])}),[],!1,null,null,null);e.default=r.exports}}]);