(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{375:function(e,n,t){"use strict";t.r(n);var a=t(7),r=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[n("strong",[e._v("委托")]),e._v("是创建线程安全类的一个最有效的策略：只需让现有的线程安全类管理所有的状态即可。\nJava平台类库提供了丰富的并发基础构建模块，例如线程安全的容器以及各种同步工具类。")]),e._v(" "),n("h2",{attrs:{id:"_1-同步容器类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-同步容器类"}},[e._v("#")]),e._v(" 1. 同步容器类")]),e._v(" "),n("p",[e._v("同步容器类包括 "),n("code",[e._v("Vector")]),e._v(" 和 "),n("code",[e._v("Hashtable")]),e._v("，以及由 "),n("code",[e._v("Collections.synchronizedXXX")]),e._v(" 等工厂方法创建的封装器类。这些类实现线程安全的方式是：将它们的状态封装起来，并对每个共有方法都进行同步，使得每次只有一个线程能访问容器的状态。")]),e._v(" "),n("h3",{attrs:{id:"_1-1-存在的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-存在的问题"}},[e._v("#")]),e._v(" 1.1 存在的问题")]),e._v(" "),n("p",[e._v("虽然容器类是线程安全的，但是在某些复合操作的环境下却并不是安全的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单5-1 Vector上可能导致混乱的复合操作 ******\n\npublic static Object getLast(Vector vector){\n    int lastIndex = vector.size()-1;\n    return vector.get(lastIndex);\n}\n\npublic static void removeLast(Vector vector){\n    int lastIndex = vector.size()-1;\n    vector.remove(lastIndex);\n}\n")])])]),n("p",[e._v("在程序清单5-1中，在多线程环境下，如果线程A调用 "),n("code",[e._v("getLast")]),e._v(" 方法的同时，线程B调用了 "),n("code",[e._v("removeLast")]),e._v(" 方法，那么如果B成功删除了最后一个元素，那么此时A再获取最后一个元素的时候就会出现角标越界的异常。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单5-2 使用客户端加锁的方式来保护Vector上的复合操作 ******\n\npublic static Object getLast(Vector vector){\n    synchronized (vector){\n        int lastIndex = vector.size()-1;\n        return vector.get(lastIndex);\n    }\n}\n\npublic static void removeLast(Vector vector) {\n    synchronized (vector) {\n        int lastIndex = vector.size() - 1;\n        vector.remove(lastIndex);\n    }\n}\n")])])]),n("p",[e._v("程序清单5-2中，通过在客户端获取"),n("code",[e._v("Vector")]),e._v("容器类的锁，使得 "),n("code",[e._v("getLast")]),e._v(" 和 "),n("code",[e._v("removeLast")]),e._v(" 方法成为原子操作，实现了线程安全。\n但是，在对 "),n("code",[e._v("Vector")]),e._v(" 中的元素进行迭代时仍会出现线程不安全的风险，因为多线程环境下，线程A迭代的同时，线程B也进行迭代并对某些元素进行了修改，那么此时A读到的数据便不是同步的最新数据，设置可能引发角标越界异常。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单5-3 可能抛出角标越界异常的迭代操作 ******\n\nfor(int x=0;x<vector.size();x++){\n    doSomething(vector.get(x));\n}\n")])])]),n("p",[e._v("可以使用客户端加锁的方式来保证迭代的安全性，但是要牺牲一定的并发性。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单5-4 带有客户端加锁的迭代操作 ******\n\nsynchronized (vector) {\n    for(int x=0;x<vector.size();x++){\n        doSomething(vector.get(x));\n    }\n}\n")])])]),n("h3",{attrs:{id:"_1-2-迭代器与concurrentmodificationexception"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-迭代器与concurrentmodificationexception"}},[e._v("#")]),e._v(" 1.2 迭代器与ConcurrentModificationException")]),e._v(" "),n("p",[e._v("无论是"),n("code",[e._v("Vector")]),e._v("这个古老的容器还是后面的新容器，很多都没有解决复合操作中的问题。无论是直接迭代还是"),n("code",[e._v("for-each")]),e._v("语法迭代，都是通过"),n("code",[e._v("Iterator")]),e._v("。")]),e._v(" "),n("p",[e._v("当有其他线程并发地修改容器，即使是使用迭代器也无法避免在迭代期间对容器进行加锁，在出现并发修改的问题时，这些容器表现出”及时失败”的行为，也就是当它们发现容器在迭代过程中被修改时，会抛出"),n("code",[e._v("ConcurrentModificationException")]),e._v("异常。")]),e._v(" "),n("p",[e._v("“及时失败”的实现方式是将计数器的变化与容器关联起来，如果在迭代期间计数器被修改，那么"),n("code",[e._v("hasNext")]),e._v("和"),n("code",[e._v("next")]),e._v("将抛出"),n("code",[e._v("ConcurrentModificationException")]),e._v("异常。这种检查是在没有同步的情况下进行的，因此可能看到被修改的失效值，而迭代器却并没有意识到。")]),e._v(" "),n("p",[e._v("当容器的规模超过一定程度，我们是不希望在迭代过程对其进行加锁的，因为这会极大的降低并发性能，那么一种替代方法就是”克隆”容器。")]),e._v(" "),n("h3",{attrs:{id:"_1-3-隐藏迭代器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-隐藏迭代器"}},[e._v("#")]),e._v(" 1.3 隐藏迭代器")]),e._v(" "),n("p",[e._v("虽然对迭代过程进行加锁可以防止"),n("code",[e._v("ConcurrentModificationException")]),e._v("异常，但是实际开发中，并不是所有迭代都是显式的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('****** 程序清单5-6 隐藏在字符串连接中的迭代操作 ******\n\npublic class HiddenIterator{\n    @GuardeBy("this")\n    private final Set<Integer> set = new HashSet<>();\n    public synchronized void add(Integer i){\n        set.add(i);\n    }\n\n    public synchronized void remove(Integer i){\n        set.remove(i);\n    }\n    \n    public void addTenThings(){\n        Random r = new Random();\n        for(int i=0;i<10;i++){\n            set.add(r.nextInt());\n        }\n        System.out.println(set);\n    }\n}\n')])])]),n("p",[e._v("在程序清单5-6 的"),n("code",[e._v("addTenThings")]),e._v("方法中，虽然显示的for迭代可以加锁，但是最后的打印语句中，打印set集合是会隐式的迭代set集合的，此时如果多线程环境下，上下非原子操作，还是可能会抛出异常。其根本原因在于"),n("code",[e._v("HiddenIterator")]),e._v("这个类不是线程安全的。")]),e._v(" "),n("p",[e._v("所有隐式的迭代都有可能抛出"),n("code",[e._v("ConcurrentModificationException")]),e._v("异常。")]),e._v(" "),n("h2",{attrs:{id:"_2-并发容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-并发容器"}},[e._v("#")]),e._v(" 2. 并发容器")]),e._v(" "),n("p",[e._v("通过并发容器来代替同步容器，可以极大地提高伸缩性并降低风险。")]),e._v(" "),n("p",[e._v("Java5.0新增了两种容器类型："),n("code",[e._v("Queue")]),e._v(" 和 "),n("code",[e._v("BlockingQueue")]),e._v("。")]),e._v(" "),n("p",[n("code",[e._v("Queue")]),e._v("用来临时保存一组等待处理的数据，它的实现之一 "),n("code",[e._v("ConcurrentLinkedQueue")]),e._v("，是一个传统的先进先出队列，以及 PriorityQueue 是一个优先队列(非并发)。"),n("code",[e._v("Queue")]),e._v("上的操作不会阻塞，如果队列为空，获取元素的操作返回空值。")]),e._v(" "),n("p",[n("code",[e._v("BlockingQueue")]),e._v("拓展了"),n("code",[e._v("Queue")]),e._v("，增加了可阻塞的插入和获取等操作。如果队列为空，那么获取元素的操作将一直阻塞，直到队列中出现一个可用的元素；如果队列已满，那么插入元素的操作将一直阻塞，直到队列中出现可用的空间。在生产者-消费者这种设计模式中，阻塞队列是非常有用的。")]),e._v(" "),n("p",[e._v("Java6也引入了"),n("code",[e._v("ConcurrentSkipListMap")]),e._v("和"),n("code",[e._v("ConcurrentSkipListSet")]),e._v("，分别作为同步的"),n("code",[e._v("SortedMap")]),e._v("和"),n("code",[e._v("SortedSet")]),e._v("的并发替代品。")]),e._v(" "),n("h3",{attrs:{id:"_2-1-concurrenthashmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-concurrenthashmap"}},[e._v("#")]),e._v(" 2.1 ConcurrentHashMap")]),e._v(" "),n("p",[e._v("同步容器类在执行每个操作期间都持有一个锁。当调用get或者contains方法时，可能包含大量的工作：遍历散列桶或列表来查找某个特定的对象时，需要调用equals。在基于散列的容器中，如果散列值分布不均匀，那么容器中的元素就不会均匀的分布在整个容器中。这种情况下，遍历会花费很长的时间，而其他线程在这段时间内都不能访问该容器。")]),e._v(" "),n("p",[n("code",[e._v("ConcurrentHashMap")]),e._v("也是一个基于散列的"),n("code",[e._v("Map")]),e._v("，但是"),n("code",[e._v("ConcurrentHashMap")]),e._v("并不是将每个方法都在同一个锁上同步，而是使用一种粒度更细的加锁机制，这种机制称为分段锁（Java8中对"),n("code",[e._v("ConcurrentHashMap")]),e._v("的加锁机制进行了改变，不再是分段锁）。在这种机制中，任意数量的读取线程可以并发的访问，并且一定数量的写入线程可以并发的修改。")]),e._v(" "),n("p",[n("code",[e._v("ConcurrentHashMap")]),e._v("提供的迭代器不会抛出"),n("code",[e._v("ConcurrentModificationException")]),e._v("异常，因此不需要在迭代过程中进行加锁。其提供的迭代器具有弱一致性，可以容忍并发的修改，并将修改操作反应给容器。")]),e._v(" "),n("p",[n("code",[e._v("ConcurrentHashMap")]),e._v("的"),n("code",[e._v("size")]),e._v("方法允许返回一个近似值而不是精确值。只有当应用程序需要加锁Map以进行独占访问时，才应该放弃使用"),n("code",[e._v("ConcurrentHashMap")]),e._v("。")]),e._v(" "),n("h3",{attrs:{id:"_2-2-额外的原子map操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-额外的原子map操作"}},[e._v("#")]),e._v(" 2.2 额外的原子Map操作")]),e._v(" "),n("p",[e._v("由于"),n("code",[e._v("ConcurrentHashMap")]),e._v("不能被加锁来进行独占访问，所以无法使用客户端加锁的方式新建原子操作。但是"),n("code",[e._v("ConcurrentHashMap")]),e._v("提供了一些常见的原子操作。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单5-7 ConcurrentMap接口 ******\n\npublic interface ConcurrentMap<K,V> extends Map<K,V>{\n    // 仅当K没有相应的映射值时才插入\n    V putIfAbsent(K key,V value);\n    \n    // 仅当K被映射到V时才删除\n    boolean remove(K key,V value);\n    \n    // 仅当K被映射到oldValue时才替换为newValue\n    boolean replace(K key,V oldValue,V newValue);\n    \n    // 仅当K被映射到一个值时才替换为newValue\n    V replace(K key,V newValue);\n}\n")])])]),n("h3",{attrs:{id:"_2-3-copyonwritearraylist"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-copyonwritearraylist"}},[e._v("#")]),e._v(" 2.3 CopyOnWriteArrayList")]),e._v(" "),n("p",[n("code",[e._v("CopyOnWriteArrayList")]),e._v("用于替代同步的"),n("code",[e._v("List")]),e._v("，在迭代期间不需要对容器进行加锁或者复制。")]),e._v(" "),n("p",[e._v("“写入时复制”容器的线程安全性在于，只要正确的发布了一个事实不可变对象，那么在访问该对象时就不需要进一步的同步。在每次修改时，都会创建并重新发布一个新的容器副本，从而实现可变性。")]),e._v(" "),n("p",[e._v("“写入时复制”容器的迭代器保留一个指向底层基础数组的引用，这个数组当前位于迭代器的起始位置，由于他不会被修改，因此在对其进行同步时只需确保数组内容的可见性。因此，多个线程可以同时对这个容器进行迭代，而不会彼此干扰或者与修改容器的线程相互干扰。")]),e._v(" "),n("p",[e._v("显然，每次修改容器时都会复制底层数组，这需要一定的开销，特别是底层数组的规模较大时，仅当迭代操作远远多于修改操作时，才应该使用“写入时复制”容器。")]),e._v(" "),n("h2",{attrs:{id:"_3-阻塞队列和生产者-消费者"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-阻塞队列和生产者-消费者"}},[e._v("#")]),e._v(" 3. 阻塞队列和生产者-消费者")]),e._v(" "),n("p",[e._v("阻塞队列提供了可阻塞的put和take方法，以及支持定时的"),n("code",[e._v("poll")]),e._v("和"),n("code",[e._v("offer")]),e._v("方法。如果队列已经满了，那么put方法将阻塞，直到有空间可用。如果队列为空，那么"),n("code",[e._v("take")]),e._v("方法将会阻塞，直到有元素可用。队列可以是有界的也可以是无界的，无界队列永远都不会充满，所以无界队列的"),n("code",[e._v("put")]),e._v("方法永远不会堵塞。")]),e._v(" "),n("p",[e._v("在基于阻塞队列构建的生产者-消费者设计中，当数据生成时，生产者把数据放入队列，而当消费者准备处理数据时，将从队列中获取数据。")]),e._v(" "),n("p",[n("code",[e._v("BlockingQueue")]),e._v("简化了生产者-消费者设计的实现过程，它支持任意数量的生产者和消费者。一种最常见的生产者-消费者设计模式就是线程池与工作队列的组合，在Executor任务执行框架中就体现了这种模式。")]),e._v(" "),n("p",[e._v("阻塞队列实现的生产者-消费者模型中，如果生产者生产工作的速率比消费者处理工作的速率快，那么当队列充满时，生产者将阻塞，并且不能继续生产工作，反之，如果消费者处理工作的速率快，当队列为空时，消费者就将等待。")]),e._v(" "),n("p",[e._v("阻塞队列同样提供了一个offer方法，如果数据不能被添加到队列中，那么将返回一个失败状态。这样你就能够创建更多灵活的策略来处理负荷过载的情况，比如，减少生产者线程的数量或者将多余的数据写入磁盘等。")]),e._v(" "),n("p",[e._v("在构建高可靠的应用程序时，有界队列是一种强大的资源管理工具：它们能抑制并防止产生过多的工作项，使应用程序在负荷过载的情况下变得更加健壮。")]),e._v(" "),n("p",[e._v("在类库中包含了"),n("code",[e._v("BlockingQueue")]),e._v("的多种实现，其中，"),n("code",[e._v("LinkedBlockingQueue")]),e._v("和"),n("code",[e._v("ArrayBlockingQueue")]),e._v("是FIFO队列，与"),n("code",[e._v("LinkedList")]),e._v("和"),n("code",[e._v("ArrayList")]),e._v("相似，但比同步List拥有更好的并发性能。"),n("code",[e._v("PriorityBlockingQueue")]),e._v("是一个按照优先级排序的队列，当你希望按照某种特定的顺序来处理元素时，这个队列将非常有用。")]),e._v(" "),n("p",[e._v("一个"),n("code",[e._v("BlockingQueue")]),e._v("的实现是 "),n("code",[e._v("SynchronousQueue")]),e._v("，实际上它不是一个真正的队列，因为他不会为队列中元素维护存储空间，而是维护一组线程，这些线程在等待着把元素加入或移出队列。仅当有足够多的消费者，并且总有一个消费者准备好获取交付的工作时，才适合使用同步队列.")]),e._v(" "),n("h3",{attrs:{id:"_3-1-示例-桌面搜索"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-示例-桌面搜索"}},[e._v("#")]),e._v(" 3.1 示例:桌面搜索")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单5-8 桌面搜索应用程序中的生产者任务和消费者任务 ******\n\n// 生产者任务(扫描文件,并存入队列)\npublic class FileCrawler implements Runnable{\n    private final BlockingDeque<File> fileBlockingDeque;\n    private final FileFilter fileFilter;\n    private final File root;\n    \n    public FileCrawler(BlockingDeque<File> fileBlockingDeque, FileFilter fileFilter, File root){\n        this.fileBlockingDeque = fileBlockingDeque;\n        this.fileFilter = fileFilter;\n        this.root = root;\n    }\n\n    @Override\n    public void run() {\n        try {\n            crawl(root);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    private void crawl(File root) throws InterruptedException {\n        File[] files = root.listFiles(fileFilter);\n        if(files!=null){\n            for(File file:files){\n                if(file.isDirectory()){\n                    crawl(file);\n                }else if(!alreadyIndexed(file)){\n                    fileBlockingDeque.put(file);\n                }\n            }\n        }\n    }\n\n}\n\n// 消费者任务(从队列中获取文件,并建立索引)\npublic class Indexer implements Runnable{\n    private final BlockingDeque<File> fileBlockingDeque;\n\n    public Indexer(BlockingDeque<File> fileBlockingDeque){\n        this.fileBlockingDeque = fileBlockingDeque;\n    }\n\n    @Override\n    public void run() {\n        while(true){\n            try {\n                indexFile(fileBlockingDeque.take());\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}\n")])])]),n("p",[e._v("在程序清单5-8中，文件遍历和建立索引被分解为独立的操作，各自只需完成自己的任务，阻塞队列将负责所有的控制流，各个功能的代码更加清晰和简单。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单5-9 启动桌面搜索 ******\n\npublic static class void startIndexing(File[] roots){\n    BlockingDeque<File> fileBlockingDeque = new LinkedBlockingDeque<>(BOUND);\n    FileFilter fileFilter = new FileFilter() {\n        @Override\n        public boolean accept(File pathname) {\n            return true;\n        }\n    };\n\n    for(File root:roots){\n        new Thread(new FileCrawler(fileBlockingDeque, fileFilter, root)).start();\n    }\n\n    for(int x=0;x<CONSUMER_COUNT;x++){\n        new Thread(new Indexer(fileBlockingDeque)).start();\n    }\n}\n")])])]),n("p",[e._v("在程序清单5-9中启动了多个爬虫程序和建立索引的程序，各自在独立的线程中执行。")]),e._v(" "),n("h3",{attrs:{id:"_3-2-串行线程封闭"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-串行线程封闭"}},[e._v("#")]),e._v(" 3.2 串行线程封闭")]),e._v(" "),n("p",[e._v("对于可变对象，生产者-消费者这种设计与阻塞队列一起，促进了串行线程封闭，从而将对象所有权从生产者交付给消费者。线程封闭对象只能由单个线程拥有，但可以通过安全的发布该对象来转移所有权，在转移所有权后，也只有另一个线程能获得这个对象的访问权限，并且发布对象的线程不会在访问它。这种安全的发布确保了对象状态对于新的所有者来说都是可见的，新的所有者线程可以对该对象做任意修改，因为它具有独占的访问权。")]),e._v(" "),n("p",[e._v("对象池利用了串行线程封闭，将对象借给一个请求线程，只要对象池包含足够的内部同步来安全的发布发布池中的对象，并且客户代码本身不会发布池中的对象，或者在将对象返回给对象池后就不再使用它，那么就可以安全的在线程之间传递所有权。")]),e._v(" "),n("h3",{attrs:{id:"_3-3-双端队列与工作密取"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-双端队列与工作密取"}},[e._v("#")]),e._v(" 3.3 双端队列与工作密取")]),e._v(" "),n("p",[e._v("Java6新增了两种容器类型，"),n("code",[e._v("Deque")]),e._v("和"),n("code",[e._v("BlockingDeque")]),e._v("，它们分别对"),n("code",[e._v("Queue")]),e._v("和"),n("code",[e._v("BlockingQueue")]),e._v("进行了扩展。")]),e._v(" "),n("p",[n("code",[e._v("Deque")]),e._v("是一个双端队列，实现了在队列头和队列尾的高效插入和移除，具体实现包括"),n("code",[e._v("ArrayDeque")]),e._v("和"),n("code",[e._v("LinkedBlockingDeque")]),e._v("。")]),e._v(" "),n("p",[e._v("双端队列适用于工作密取模式，在工作密取设计中，每个消费者都有各自的双端队列，如果一个消费者完成了自己双端队列中的全部工作，那么他可以从其他消费者双端队列末尾秘密的获取工作。密取工作模式比传统的生产者-消费者模式具有更高的可伸缩性，这是因为工作者线程不会在单个共享的任务队列上发生竞争。在大多数时候，他们都只是访问自己的双端队列，从而极大的减少了竞争，当工作者线程需要访问另一个队列时，它会从队列的尾部而不是从头部获取工作，因此进一步降低了队列上的竞争程度。")]),e._v(" "),n("h2",{attrs:{id:"_4-阻塞方法与中断方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-阻塞方法与中断方法"}},[e._v("#")]),e._v(" 4. 阻塞方法与中断方法")]),e._v(" "),n("p",[e._v("阻塞操作与执行时间很长的普通操作的区别在于，被阻塞的线程必须等待某个不受它控制的事件发生后才可以继续执行，例如等待I/O操作完成、等待某个锁变成可用、或者等待外部计算的结束。当某个外部事件发生后，线程被重置为 runnable 状态，并可以再度被调度执行。")]),e._v(" "),n("p",[n("code",[e._v("BlockingQueue")]),e._v("的"),n("code",[e._v("put")]),e._v("和"),n("code",[e._v("take")]),e._v("方法会抛出受检异常"),n("code",[e._v("InterruptedException")]),e._v("。 当某个方法抛出"),n("code",[e._v("InterruptedException")]),e._v("异常时，表示该方法是一个阻塞方法，如果这个方法被中断，那么它将努力提前结束阻塞状态。")]),e._v(" "),n("p",[n("code",[e._v("Thread")]),e._v("提供了"),n("code",[e._v("interrupt")]),e._v("方法，用于中断线程或者查询线程是否已经被中断。")]),e._v(" "),n("p",[n("strong",[e._v("中断，是一种协作机制，而并不是强制操作")]),e._v("，当线程a中断b时，a仅仅是要求b在执行到某个可以暂停的地方停止正在执行的操作，前提是如果线程b愿意停止下来。")]),e._v(" "),n("p",[e._v("如何处理"),n("code",[e._v("InterruptedException")]),e._v("异常?")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("传递异常，继续向上层抛出")])]),e._v(" "),n("li",[n("p",[e._v("恢复中断，即 Thread.currentThread().interrupt()")])])]),e._v(" "),n("h2",{attrs:{id:"_5-同步工具类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-同步工具类"}},[e._v("#")]),e._v(" 5. 同步工具类")]),e._v(" "),n("h3",{attrs:{id:"_5-1-countdownlatch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-countdownlatch"}},[e._v("#")]),e._v(" 5.1 CountDownLatch")]),e._v(" "),n("p",[n("code",[e._v("CountDownLatch")]),e._v("（闭锁）是一种同步工具类，可以延迟线程的进度直到其到达终止状态。")]),e._v(" "),n("p",[e._v("闭锁的作用相当于一扇门：在闭锁到达结束状态之前，这扇门一直是关闭的，没有任何线程能通过，当到达结束状态时，这扇门会打开，并允许所有的线程通过；当闭锁到达结束状态后，将不会在改变状态，因此，这扇门将永远保持打开状态。闭锁可以用来确保某些活动直到其他活动都完成后才继续执行。")]),e._v(" "),n("p",[n("code",[e._v("CountDownLatch")]),e._v("是一种灵活的闭锁实现，它可以是一个或多个线程等待一组事件发生。闭锁状态包含一个计数器，该计数器被初始化为一个正数，表示需要等待的事件数量。"),n("code",[e._v("countDown")]),e._v("方法递减计数器，表示有一个事件已经发生了，而await方法等待计数器达到零，这表示所有需要等待的事件都已经发生，如果计数器的值非零，那么await方法会一直阻塞，直到计数器为零，或者等待中的线程中断，或者等待超时。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单5-11 在计时测试中使用CountDownLatch来启动或停止线程 ******\n\npublic class TestHarness{\n    public long timeTasks(int nThreads,final Runnable task) throws InterruptedException {\n        final CountDownLatch startGate = new CountDownLatch(1);\n        final CountDownLatch endGate = new CountDownLatch(nThreads);\n        \n        for(int i=0;i<nThreads;i++){\n            Thread t = new Thread(){\n                @Override\n                public void run() {\n                    try {\n                        startGate.await();\n                        try {\n                            task.run();\n                        } finally {\n                            endGate.countDown();\n                        }\n                    } catch (InterruptedException e) {}\n                }\n            };\n            \n            t.start();\n        }\n        \n        long start = System.nanoTime();\n        startGate.countDown();\n        endGate.await();\n        long end = System.nanoTime();\n        return end-start;\n    }\n}\n")])])]),n("p",[e._v("在程序清单5-11中，for循环创建了n个线程，虽然每个线程调用了start方法，但是实际上每个线程却因为"),n("code",[e._v("startGate.await()")]),e._v("而处于阻塞状态，因为此时startGate计数器为1不为0。")]),e._v(" "),n("p",[e._v("然后记录当前时间作为开始时间，将startGate的计数器减为0，新创建的n个线程结束阻塞状态继续执行，并且每条线程任务执行完毕后将endGate计数器减1，此时主线程由于"),n("code",[e._v("endGate.await()")]),e._v("而处于阻塞状态，当endGate计数器为0时，说明新创建的n个线程都执行完毕，主线程继续执行，记录下最近的时间作为结束时间，这样便可以得到所有新线程的执行时间。")]),e._v(" "),n("h3",{attrs:{id:"_5-2-futuretask"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-futuretask"}},[e._v("#")]),e._v(" 5.2 FutureTask")]),e._v(" "),n("p",[n("code",[e._v("FutureTask")]),e._v("也可以用作闭锁，"),n("code",[e._v("FutureTask")]),e._v("表示的计算是通过Callable来实现的，相当于一种可生成结构的Runnable，并且可以处于以下三种状态：等待运行、正在运行、运行完成。")]),e._v(" "),n("p",[n("code",[e._v("Future.get")]),e._v("的行为取决于任务的状态。如果任务已经完成，那么get会立即返回结果，否则将阻塞，直到任务进行完成状态，然后返回结果或抛出异常。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单5-12 使用FutureTask来提前加载稍后需要的数据 ******\n\npublic class Preloader{\n    private final FutureTask<ProductionInfo> futureTask = new FutureTask<ProductionInfo>(new Callable<ProductionInfo>() {\n        @Override\n        public ProductionInfo call() throws Exception {\n            return loadInfo();\n        }\n    });\n    \n    private final Thread thread = new Thread(futureTask);\n    \n    public void start(){\n        thread.start();\n    }\n    \n    public ProductionInfo get(){\n        try {\n            return futureTask.get();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        } catch (ExecutionException e) {\n            Throwable cause = e.getCause();\n            if(cause instanceof DataLoadException){\n                throw (DataLoadException)cause;\n            }else{\n                throw launderThrowable(cause);\n            }\n        }\n    }\n}\n")])])]),n("p",[e._v("在程序清单5-12 中，由于在构造函数或静态初始化方法中启动线程并不是一个好方法，所以提供了一个start方法用于启动线程，可以提前通过start启动线程，在需要ProductionInfo时调用get方法便可以获得商品信息，如果数据还未加载好，get将等待数据加载完毕，然后返回结果。")]),e._v(" "),n("p",[e._v("Callable表示的任务可以抛出受检的或者未受检的异常，无论任务代码抛出什么异常，都会被封装到一个"),n("code",[e._v("ExecutionException")]),e._v("中，并在"),n("code",[e._v("Future.get")]),e._v("中被重新抛出。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('****** 程序清单5-13 强制将未检查的Throwable转换为RuntimeException ******\n\npublic static RuntimeException launderThrowable(Throwable t){\n    if(t instanceof RuntimeException){\n        return (RuntimeException) t;\n    }else if(t instanceof Error){\n        throw (Error)t;\n    }else{\n        throw new IllegalStateException("not unchecked",t);\n    }\n}\n')])])]),n("h3",{attrs:{id:"_5-3-semaphore"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-semaphore"}},[e._v("#")]),e._v(" 5.3 Semaphore")]),e._v(" "),n("p",[e._v("计算信号量(Counting Semaphore)用来控制同时访问某个特定资源的操作数量，或者同时执行某个指定操作的数量，还可以用来实现某种资源池，或者对容器加边界。")]),e._v(" "),n("p",[e._v("Semaphore中管理着一种虚拟的许可，许可的初始数量可通过构造函数来指定。在执行操作时，可以首先获得许可，应该使用以后释放许可。如果没有许可，那么acquire将阻塞直到有许可，release方法将返回一个许可给信号量。计算信号量的一种简化形式是二值信号量，即初始值为1的Semaphore，二值信号量可以用作互斥体，并具备不可重入的加锁语义：谁拥有这个唯一的许可，谁就拥有了互斥锁。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单5-14 使用Semaphore为容器设置边界 ******\n\npublic class BoundedHashSet<T>{\n    private final Set<T> set;\n    private final Semaphore semaphore;\n    \n    public BoundedHashSet(int bound){\n        set = Collections.synchronizedSet(new HashSet<>());\n        semaphore = new Semaphore(bound);\n    }\n    \n    public boolean add(T o) throws InterruptedException {\n        // 执行添加操作前,先获取一个许可\n        semaphore.acquire();\n        boolean wasAdded = false;\n        try {\n            wasAdded = set.add(o);\n            return wasAdded;\n        }finally {\n            // 如果添加操作失败,将之前获取的许可返回\n            if(!wasAdded){\n                semaphore.release();\n            }\n        }\n    }\n    \n    public boolean remove(Object o){\n        boolean wasRemoved = set.remove(o);\n        //删除成功后,向semaphore信号量中增加一个许可\n        if(wasRemoved){\n            semaphore.release();\n        }\n        return wasRemoved;\n    }\n}\n")])])]),n("p",[e._v("Semaphore中acquire方法在获取不到许可时会等待，但是还有一个tryAcquire方法，当成功获取许可时，此方法返回true，并且Semaphore中许可数-1；当获取失败时，此方法不会等待，直接返回false。在设计一些连接的限定次数的自动重连功能时很好用。")]),e._v(" "),n("p",[n("strong",[e._v("示例：通过Semaphore给HashSet容器加边界")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class BoundedHashSet<E> {\n\n    private final Set set = new HashSet<E>();\n\n    private final Semaphore semaphore;\n\n    public BoundedHashSet(int size){\n        //创建指定大小的信号量\n        semaphore = new Semaphore(size);\n    }\n\n    public boolean add(E e) throws InterruptedException {\n        //每次添加,先从信号量中获取许可\n        System.out.println("add : 获取semaphore许可");\n        semaphore.acquire();\n        System.out.println("add : semaphore许可获取成功,开行进行添加操作");\n        boolean success = false;\n        try{\n            success = set.add(e);\n            return success;\n        }finally {\n            //如果添加失败,那么释放许可\n            if(!success){\n                semaphore.release();\n            }\n        }\n    }\n\n    public boolean remove(E e){\n        boolean success = set.remove(e);\n        if(success){\n            //如果删除成功,那么释放许可\n            semaphore.release();\n        }\n        return success;\n    }\n\n    @Override\n    public String toString() {\n        return set.toString();\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n\n        BoundedHashSet mySet = new BoundedHashSet<String>(5);\n\n        for(int x=1;x<=6;x++){\n\n            System.out.println("---------第"+x+"次add添加---------");\n            mySet.add("i am element-"+x);\n            System.out.println(mySet);\n\n        }\n    }\n\n\n}\n\n输出结果:\n---------第1次add添加---------\nadd : 获取semaphore许可\nadd : semaphore许可获取成功,开行进行添加操作\n[i am element-1]\n---------第2次add添加---------\nadd : 获取semaphore许可\nadd : semaphore许可获取成功,开行进行添加操作\n[i am element-2, i am element-1]\n---------第3次add添加---------\nadd : 获取semaphore许可\nadd : semaphore许可获取成功,开行进行添加操作\n[i am element-3, i am element-2, i am element-1]\n---------第4次add添加---------\nadd : 获取semaphore许可\nadd : semaphore许可获取成功,开行进行添加操作\n[i am element-3, i am element-2, i am element-4, i am element-1]\n---------第5次add添加---------\nadd : 获取semaphore许可\nadd : semaphore许可获取成功,开行进行添加操作\n[i am element-3, i am element-2, i am element-5, i am element-4, i am element-1]\n---------第6次add添加---------\nadd : 获取semaphore许可\n')])])]),n("p",[e._v("可以看到，限定了BoundedHashSet大小为5后，在进行第6次添加时，由于BoundedHashSet内部semaphore许可耗尽，所以只能等待。")]),e._v(" "),n("p",[e._v("Semaphore在实现指定次数的自动重连时也有很大作用。")]),e._v(" "),n("h3",{attrs:{id:"_5-4-barrier"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-barrier"}},[e._v("#")]),e._v(" 5.4 Barrier")]),e._v(" "),n("p",[e._v("栅栏(Barrier)类似于闭锁，它能阻塞一组线程直到某个事件发生。")]),e._v(" "),n("p",[e._v("栅栏与闭锁的关键区别在于，所有线程必须同时到达栅栏位置，才能继续执行。闭锁用于等待事件，栅栏用于等待其他线程。")]),e._v(" "),n("p",[n("code",[e._v("CyclicBarrier")]),e._v("可以使一定数量的参与方反复的在栅栏位置汇集，它在并行迭代算法中非常有用，这种方法通常将一个问题拆分成一系列相互独立的子问题。当线程到达栅栏位置时将调用await方法，这个方法将阻塞，直到所有线程都到达栅栏位置。如果所有线程都到达了栅栏位置，那么栅栏将打开，此时所有线程都被释放，而栅栏将被重置，以便下次使用。如果对await的调用超时，或者await阻塞的线程被中断，那么栅栏就被认为是打破了，所有阻塞的await调用都将终止并抛出"),n("code",[e._v("BrokenBarrierException")]),e._v("。如果成功的通过栅栏，那么await将为每个线程返回一个唯一的到达索引号，我们可以利用这些索引来选举产生一个领导线程，并在下一次迭代中，由该领导线程执行一些特殊的工作。CyclicBarrier还可以使你将一个栅栏操作传递给构造函数，这是一个Runnable，当成功通过栅栏时会执行它，但在阻塞线程被释放之前是不能执行的。")]),e._v(" "),n("p",[e._v("假如我们有一幅地图，需要对地图上的所有坐标点做一个汇总计算，而地图上有成千上万个坐标点，每个坐标点都需要动态的计算新的位置，我们不可能为每个坐标点都创建一个新的线程，但是我们可以将所有这个点打成n个子包，每个现场负责一个包内坐标点的计算，当所有线程计算完所有坐标点的新位置时，做最后的汇总计算。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单5-15 通过CyclicBarrier协调坐标点的计算 ******\n\npublic class MapCompute{\n    private final Location allLocations;\n    private final CyclicBarrier cyclicBarrier;\n    private final Worker[] workers;\n    \n    public MapCompute(Location allLocations){\n        this.allLocations = allLocations;\n        //获取系统的线程数量\n        int count = Runtime.getRuntime().availableProcessors();\n        //根据系统的线程数创建栅栏,并定义所有线程到达栅栏后的动作,即最后汇总计算\n        this.cyclicBarrier = new CyclicBarrier(count, new Runnable() {\n            @Override\n            public void run() {\n                allLocations.totalCompute();\n            }\n        });\n        //创建计算子线程\n        this.workers = new Worker[count];\n        for (int i=0;i<count;i++){\n            //每个计算子线程内放入划分好的坐标点包\n            workers[i] = new Worker(allLocations.getSubLocations(count,i));\n        }\n    }\n    \n    private class Worker implements Runnable{\n        \n        private final Location subLocations;\n        \n        public Worker(Location subLocations){\n            this.subLocations = subLocations;\n        }\n        \n        @Override\n        public void run() {\n            //子线程对坐标点进行计算\n            while (!subLocations.hasComputed()){\n                compute(subLocations);\n            }\n            //计算完成后在栅栏处等待其他线程到达,所有线程都到达后,将会执行CyclicBarrier定义时设置的Runnable做汇总计算\n            try {\n                cyclicBarrier.await();\n            } catch (InterruptedException e) {\n            } catch (BrokenBarrierException e) {\n            }\n        }\n    }\n    \n    public void start(){\n        //启动计算子线程\n        for (int i=0;i<workers.length;i++){\n            new Thread(workers[i]).start();\n        }\n    }\n}\n")])])]),n("p",[e._v("另一种形式的栅栏是Exchanger，它是一种两方栅栏，各方在栅栏位置上交换数据，当两方执行不对称的操作时，Exchanger会非常有用。")]),e._v(" "),n("p",[e._v("例如，当一个线程向缓冲区写入数据，而另一个线程从缓冲区读取数据，这些线程可以使用Exchanger來汇合，并将满的缓冲区与空的缓冲区交换。")]),e._v(" "),n("h3",{attrs:{id:"_5-5-abstractqueuedsynchronizer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-abstractqueuedsynchronizer"}},[e._v("#")]),e._v(" 5.5 AbstractQueuedSynchronizer")]),e._v(" "),n("p",[e._v("推荐阅读这三篇文章：")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://www.cnblogs.com/micrari/p/6937995.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("AbstractQueuedSynchronizer源码解读"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://www.jianshu.com/p/fadac70b2b1c",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入理解AbstractQueuedSynchronizer（一）"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://www.jianshu.com/p/67117db5b426",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入理解AbstractQueuedSynchronizer（二）"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"_6-构建高效且可伸缩的结果缓存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-构建高效且可伸缩的结果缓存"}},[e._v("#")]),e._v(" 6. 构建高效且可伸缩的结果缓存")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('****** 程序清单 5-16 使用HashMap和同步机制来实现缓存 ******\n\npublic class MyCache1<K,V>{\n\n    @GuardeBy("this")\n    private final Map<K,V> cache = new HashMap<>();\n\n    public synchronized V get(K key){\n        V result = cache.get(key);\n        if(result==null){\n            result = create(key);\n            cache.put(key,result);\n        }\n        return result;\n    }\n\n}\n')])])]),n("p",[e._v("程序清单5-16保证了线程安全性，但是由于其同步机制，每次只有一个线程能够执行get方法，如果该方法执行需要较长时间，那么将带来极差的并发性。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单 5-17 使用ConcurrentHashMap来代替HashMap ******\n\npublic class MyCache2<K,V>{\n\n    private final Map<K,V> cache = new ConcurrentHashMap<>();\n\n    public V get(K key){\n        V result = cache.get(key);\n        if(result==null){\n            result = create(key);\n            cache.put(key,result);\n        }\n        return result;\n    }\n\n}\n")])])]),n("p",[e._v("程序清单5-17有更好的并发性，但是却存在一个漏洞，在两个线程同时get调用方法时，可能引起result重复创建的问题，如果result只允许创建一次，那么这个漏洞就是不可容忍的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单 5-18 基于FutureTask ******\n\npublic class MyCache3<K,V>{\n\n    private final Map<K,Future<V>> cache = new ConcurrentHashMap<>();\n\n    public V get(K key){\n        Future<V> future = cache.get(key);\n        if(future==null){\n            FutureTask<V> task = new FutureTask<V>(new Callable<V>() {\n                @Override\n                public V call() throws Exception {\n                    return create(key);\n                }\n            });\n            future = task;\n            cache.put(key,future);\n            task.run();\n        }\n        try {\n            return future.get();\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n")])])]),n("p",[e._v("程序清单5-18依然存在result重复创建的漏洞，虽然发生的几率比上一个版本小，但是依然存在，因为if代码块仍然是非原子操作。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单 5-19 基于FutureTask的最终实现 ******\npublic class MyCache4<K,V>{\n\n    private final Map<K,Future<V>> cache = new ConcurrentHashMap<>();\n\n    public V get(K key){\n        Future<V> future = cache.get(key);\n        if(future==null){\n            FutureTask<V> task = new FutureTask<V>(new Callable<V>() {\n                @Override\n                public V call() throws Exception {\n                    return create(key);\n                }\n            });\n            Future<V> absent = cache.putIfAbsent(key, future);\n            if(absent==null){\n                future = task;\n                task.run();\n            }\n        }\n        try {\n            return future.get();\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n")])])]),n("p",[e._v("程序清单5-19解决了if代码块非原子性的问题，但是其可能引起缓存污染的问题，因为其缓存的并不是最终的result值。同时，它也没有解决缓存更新和删除的问题，只依靠缓存的FutureTask在某些情况下无法解决删除缓存的问题，比如当result是网络连接时，我们在移除缓存的同时还需要正确的关闭此连接，那么FutureTask时无法得到当前想要关闭的连接本体的。")])])}),[],!1,null,null,null);n.default=r.exports}}]);