(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{372:function(e,n,t){"use strict";t.r(n);var r=t(7),a=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Java没有提供任何机制来安全的终止线程，但它提供了中断，这是一种协作机制，能够使一个线程终止另一个线程的当前工作。")]),e._v(" "),n("h2",{attrs:{id:"_1-任务取消"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-任务取消"}},[e._v("#")]),e._v(" 1. 任务取消")]),e._v(" "),n("p",[e._v("在Java中没有一种安全的抢占式方法来停止线程，因此也就没有安全的抢占方法来停止任务，只有一些协作式的机制，使请求取消的任务和代码都遵循一种协商好的协议。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('****** 程序清单7-1 使用volatile类型的域来保存取消状态 ******\n\n@ThreadSafe\npublic class PrimeGenerator implements Runnable{\n    @GuardedBy("this")\n    private final List<BigInteger> primes = new ArrayList<>();\n    \n    private volatile boolean cancelled;\n\n    @Override\n    public void run() {\n        BigInteger p = BigInteger.ONE;\n        while (!cancelled){\n            p = p.nextProbablePrime();\n            synchronized (this){\n                primes.add(p);\n            }\n        }\n    }\n    \n    public void cancel(){\n        cancelled = true;\n    }\n    \n    public synchronized List<BigInteger> get(){\n        return new ArrayList<>(primes);\n    }\n}\n')])])]),n("p",[e._v("程序清单7-1中通过设置”请求取消”的标志和修改该标志来实现线程的终止。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单7-2 一个仅运行一秒钟的素数生成器 ******\n\nList<BigInteger> aSecondOfPrimes() throws InterruptedException {\n    PrimeGenerator generator = new PrimeGenerator();\n    new Thread(generator).start();\n\n    try {\n        Thread.currentThread().sleep(1);\n    } finally {\n        generator.cancel();\n    }\n    return generator.get();\n}\n")])])]),n("p",[e._v("程序清单7-2给出了7-1中生成器的使用示例，即让素数生成器运行1秒后停止。")]),e._v(" "),n("p",[e._v("一个可取消的任务必须拥有取消策略，在这个策略中将详细定义如何请求取消该任务，任务在核实检查是否已经请求了取消，以及在响应取消请求时应该执行哪些操作。")]),e._v(" "),n("h3",{attrs:{id:"_1-1-中断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-中断"}},[e._v("#")]),e._v(" 1.1 中断")]),e._v(" "),n("p",[e._v("7-1中素数生成器的取消机制最终会使得搜索素数的任务退出，但在退出过程中需要花费一定的时间。然而，如果使用这种方法的任务调用了一个阻塞方法，例如"),n("code",[e._v("BlockingQueue.put")]),e._v("，那么可能会产生一个更严重的问题：任务可能永远不会检查取消标志，因此永远不会结束。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单7-3 不可靠的取消操作把生产值置于阻塞的操作中 ******\n\nclass BrokenPrimeProducer extends Thread{\n    private final BlockingDeque<BigInteger> queue;\n    private volatile boolean cancelled = false;\n    BrokenPrimeProducer(BlockingDeque<BigInteger> queue){\n        this.queue = queue;\n    }\n\n    @Override\n    public void run() {\n        BigInteger p = BigInteger.ONE;\n        while (!cancelled){\n            try {\n                queue.put(p = p.nextProbablePrime());\n            } catch (InterruptedException e) {\n            }\n        }\n    }\n\n    public void cancel(){\n        cancelled = true;\n    }\n    \n}\n\nvoid consumePrimes(){\n    BlockingDeque<BigInteger> primes = new LinkedBlockingDeque<>();\n    BrokenPrimeProducer producer = new BrokenPrimeProducer(queue);\n    producer.start();\n    try{\n        while (needMorePrimes()){\n            consume(primes.take());\n        }\n    }finally {\n        producer.cancel();\n    }\n    \n}\n")])])]),n("p",[e._v("程序清单7-3就说明了上述问题：如果生产者的速度超过了消费者的处理速度，队列将被填满，"),n("code",[e._v("put")]),e._v("方法也会阻塞。当生产者在"),n("code",[e._v("put")]),e._v("方法中阻塞时，如果消费者希望取消生产者任务，它可以调用"),n("code",[e._v("cancel")]),e._v("方法来设置"),n("code",[e._v("cancelled")]),e._v("标志，但此时生产者却永远不能检查这个标志，因为它无法从阻塞的"),n("code",[e._v("put")]),e._v("方法中恢复过来（因为消费者此时已经停止从队列中取素数，所以put方法将一直保持阻塞状态）。")]),e._v(" "),n("p",[e._v("在Java的API或语言规范中，并没有将中断与任何取消语义关联起来，但实际上，如果在取消之外的其他操作中使用中断，那么都是不合适的，并且很难支撑起更大的应用。")]),e._v(" "),n("p",[e._v("调用interrupt并不意味着立即停止目标线程正在进行的工作，而只是传递了请求中断的消息。")]),e._v(" "),n("p",[e._v("对中断操作的正确理解是：它并不会真正的中断一个正在执行的线程，而只是发出中断请求，然后由线程在下一个合适的时刻中断自己，这些时刻也被称为取消点。")]),e._v(" "),n("p",[e._v("在使用静态的"),n("code",[e._v("interrupted")]),e._v("时应该小心，因为它会清除当前线程的中断状态，如果在调用"),n("code",[e._v("interrupted")]),e._v("时返回了true，那么除非你想屏蔽这个中断，否则必须对它进行处理：可以抛出"),n("code",[e._v("InterruptedException")]),e._v("，或者通过再次调用"),n("code",[e._v("interrupt")]),e._v("来恢复中断状态。")]),e._v(" "),n("p",[e._v("通常，中断是实现取消的最合理方式。程序清单7-3中的问题很容易解决：使用中断而不是boolean标志来请求取消。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单7-5 通过中断来取消 ******\n\nclass PrimeProducer extends Thread{\n    private final BlockingDeque<BigInteger> queue;\n    PrimeProducer(BlockingDeque<BigInteger> queue){\n        this.queue = queue;\n    }\n\n    @Override\n    public void run() {\n        BigInteger p = BigInteger.ONE;\n        while (!Thread.currentThread().isInterrupted()){\n            try {\n                queue.put(p = p.nextProbablePrime());\n            } catch (InterruptedException e) {\n            }\n        }\n    }\n\n    public void cancel(){\n        interrupt();\n    }\n\n}\n")])])]),n("p",[e._v("最合理的中断策略是某种形式的线程级取消操作或服务级取消操作：尽快退出，在必要时进行清理，通知某个所有者线程已经退出。")]),e._v(" "),n("p",[e._v("线程应该只能由其所有者来中断。")]),e._v(" "),n("h3",{attrs:{id:"_1-2-响应中断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-响应中断"}},[e._v("#")]),e._v(" 1.2 响应中断")]),e._v(" "),n("p",[e._v("有两种实用的策略来处理"),n("code",[e._v("InterruptedException")])]),e._v(" "),n("ol",[n("li",[n("p",[e._v("传递异常，向上层抛出。")])]),e._v(" "),n("li",[n("p",[e._v("恢复中断状态。")]),e._v(" "),n("p",[e._v("对于一些不支持取消但仍可以调用可中断阻塞方法的操作，必须在循环中调用这些方法，并在发现中断后重新尝试。在这种情况下，它们应该在本地保存中断状态，并在返回前恢复状态，而不是在捕获"),n("code",[e._v("InterruptedException")]),e._v("异常时恢复状态。")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单7-7 不可取消的任务在退出前恢复中断 ******\n\npublic Task getNextTask(BlockingQueue<Task> queue){\n    boolean interrupted = false;\n    try{\n        while (true){\n            try {\n                return queue.take();\n            } catch (InterruptedException e) {\n                interrupted = true;\n                // 重新尝试\n            }\n        }\n    }finally {\n        if(interrupted){\n            Thread.currentThread().interrupt();\n        }\n    }\n}\n")])])]),n("p",[e._v("当一个由ThreadPoolExecutor拥有的工作者线程检测到中断时，它会检查现场时是否正在关闭，如果是，它会在结束之前执行一些线程池清理工作，否则它可能创建一个新线程将线程池恢复到合理的规模。")]),e._v(" "),n("h3",{attrs:{id:"_1-3-通过future来实现取消"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-通过future来实现取消"}},[e._v("#")]),e._v(" 1.3 通过Future来实现取消")]),e._v(" "),n("p",[n("code",[e._v("Future")]),e._v("拥有一个"),n("code",[e._v("cancel")]),e._v("方法，该方法带有一个boolean类型的参数"),n("code",[e._v("mayInterruptIfRunning")]),e._v("，表示取消操作是否成功（这只是表示任务是否能够接收中断，而不是表示任务是否能检测并处理中断）。 如果"),n("code",[e._v("mayInterruptIfRunning")]),e._v("为true并且任务正在某个线程中运行 ，那么这个线程能被中断。如果为false，那么意味着”若任务还没启动，就不要运行它”，这种方式应该用于那些不处理中断的任务。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单7-10 通过Future来取消任务 ******\n\npublic static void timeRun(Runnable r, long timeout, TimeUnit timeUnit) throws InterruptedException {\n    Future<?> task = taskExec.submit(r);\n    try {\n        task.get(timeout,timeUnit);\n    }  catch (ExecutionException e) {\n        e.printStackTrace();\n    } catch (TimeoutException e) {\n        e.printStackTrace();\n    }finally {\n        //如果任务已经结束,那么执行取消操作不会带来任何影响\n        //如果任务正在运行,那么将被中断\n        task.cancel(true);\n    }\n}\n")])])]),n("h3",{attrs:{id:"_1-4-处理不可中断的阻塞"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-处理不可中断的阻塞"}},[e._v("#")]),e._v(" 1.4 处理不可中断的阻塞")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单7-11 通过改写interrupt方法来将非标准的取消操作封装在Thread中 ******\n\npublic class ReaderThread extends Thread{\n    private final Socket socket;\n    private final InputStream in;\n    public ReaderThread(Socket socket, InputStream in){\n        this.socket = socket;\n        this.in = in;\n    }\n\n    @Override\n    public void interrupt() {\n        try {\n            socket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }finally {\n            super.interrupt();\n        }\n    }\n\n    @Override\n    public void run() {\n        try{\n            byte[] buf = new byte[1024];\n            while (true){\n                int count = in.read();\n                if(count<0){\n                    break;\n                }else if(count>0){\n                    processBuffer(buf,count);\n                }\n            }\n        }catch (IOException e){\n            \n        }\n    }\n}\n")])])]),n("p",[e._v("程序清单7-1中，通过重写interrupt方法,实现了当线程中断时，依然能关闭阻塞的socket连接。")]),e._v(" "),n("h3",{attrs:{id:"_1-5-采用newtaskfor来封装非标准的取消"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-采用newtaskfor来封装非标准的取消"}},[e._v("#")]),e._v(" 1.5 采用newTaskFor来封装非标准的取消")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('****** 程序清单7-12 通过newTaskFor将非标准的取消操作封装在一个任务中 ******\n\npublic interface CancellableTask<T> extends Callable<T>{\n    void cancel();\n    RunnableFuture<T> newTask();\n}\n\n@ThreadSafe\npublic class CancellingExecutor extends ThreadPoolExecutor{\n    @Override\n    protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {\n        if(callable instanceof CancellableTask){\n            return ((CancellableTask) callable).newTask();\n        }else {\n            return super.newTaskFor(callable);\n        }\n    }\n}\n\npublic abstract class SocketUsingTask<T> implements CancellableTask<T>{\n    @GuardeBy("this")\n    private Socket socket;\n    \n    protected synchronized void setSocket(Socket socket){\n        this.socket = socket;\n    }\n    \n    public synchronized void cancel(){\n        try{\n            if(socket!=null)\n                socket.close();\n        } catch (IOException e) {\n            \n        }\n    }\n\n    @Override\n    public RunnableFuture<T> newTask() {\n        return new FutureTask<T>(this){\n            @Override\n            public boolean cancel(boolean mayInterruptIfRunning) {\n                try{\n                    SocketUsingTask.this.cancel();\n                }finally {\n                    return super.cancel(mayInterruptIfRunning);\n                }\n            }\n        };\n    }\n}\n')])])]),n("h2",{attrs:{id:"_2-停止基于线程的服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-停止基于线程的服务"}},[e._v("#")]),e._v(" 2. 停止基于线程的服务")]),e._v(" "),n("p",[e._v("应用程序拥有服务，服务拥有工作者线程，应用程序不应该直接拥有工作者线程。同时，服务应该提供生命周期方法来关闭自己以及所拥有的线程。这样，当应用程序关闭服务时，服务来关闭线程。")]),e._v(" "),n("p",[e._v("对于持有线程的服务，只要服务的存在时间大于创建线程的方法的存在时间，那么就应该提供生命周期方法。")]),e._v(" "),n("p",[n("strong",[e._v("示例:日志服务")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单 7-13 不支持关闭的生产者-消费者日志服务 ******\n\npublic class logWriter{\n    private final BlockingQueue<String> queue;\n    private final LoggerThread logger;\n\n    public logWriter(Writer writer) {\n        this.queue = new LinkedBlockingDeque<>(CAPACITY);\n        this.logger = new LoggerThread(writer);\n    }\n\n    public void start(){ logger.start(); }\n    \n    public void log(String msg) throws InterruptedException {\n        queue.put(msg);\n    }\n    \n    private class LoggerThread extends Thread{\n        private final Writer writer;\n\n        private LoggerThread(Writer writer) {\n            this.writer = writer;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true)\n                    writer.println(queue.take());\n            } catch (InterruptedException e) {\n            } finally {\n                writer.close();\n            }\n        }\n    }\n}\n")])])]),n("p",[e._v("程序清单7-13是一种多生产者单消费者的设计方式，每个调用log的操作都相当于一个生产者，而后台的日志线程则相当于消费者，如果消费者的处理速度低于生产的生成速度，那么将阻塞生产者，直到日志线程有能力处理新的日志消息。")]),e._v(" "),n("p",[e._v("要解决7-13中日志线程的关闭，有一种方法很容易，因为take能响应中断，当捕获到中断异常时，可以结束日志线程。然而，如果只是是线程退出，那么还不是一种完备的管理机制，这种直接关闭的做法，会丢失那些正在等待被写入到日志中的信息，不仅如此，其他线程将在调用log时被阻塞，因为日志队列是满的，因此这些线程将无法解除阻塞状态。当取消一个生产者-消费者操作时，需要同时取消生产者和消费者，在中断日志线程时会处理消费者。但在这个示例中，由于生产者并不是专门的线程，因此要取消它们将非常困难。")]),e._v(" "),n("p",[e._v("另一种关闭的方法是设置某个”已请求关闭”的标志，以避免进一步提交日志消息。但这种方法并不可靠，这是一种先判断再运行的方法，生产者发现该服务还没有关闭，因此在关闭服务后仍然会将日志消息放入队列，这同样会使得生产者可能在调用log时阻塞，并且无法解除阻塞状态。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('****** 程序清单7-14 向LogWriter添加可靠的取消操作 ******\n\npublic class LogService{\n    private final BlockingQueue<String> queue;\n    private final LoggerThread loggerThread;\n    private final PrintWriter writer;\n    @GuardeBy("this")\n    private boolean isShutdown;\n    @GuardeBy("this")\n    private int reservations;\n\n    public void start(){ loggerThread.start(); }\n    \n    public void stop(){\n        synchronized (this){\n            isShutdown = true;\n        }\n        loggerThread.interrupt();\n    }\n\n    public void log(String msg) throws InterruptedException {\n        synchronized (this){\n            if(isShutdown){\n                throw new RuntimeException();\n            }\n            ++reservations;\n        }\n        queue.put(msg);\n    }\n\n    private class LoggerThread extends Thread{\n        private final Writer writer;\n\n        private LoggerThread(Writer writer) {\n            this.writer = writer;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true)\n                    synchronized (LogService.this){\n                        if(isShutdown && reservations==0){\n                            break;\n                        }\n                    }\n                    String msg = queue.take();\n                    synchronized (LogService.this){\n                        --reservations;\n                    }\n                    writer.println(msg);\n            } catch (InterruptedException e) {\n            } finally {\n                writer.close();\n            }\n        }\n    }\n}\n')])])]),n("p",[e._v("程序清单7-14通过原子方式来检查关闭请求，实现了日志服务的安全关闭。")]),e._v(" "),n("h3",{attrs:{id:"_2-1-关闭executorservice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-关闭executorservice"}},[e._v("#")]),e._v(" 2.1 关闭ExecutorService")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单7-16 使用ExecutorService的日志服务 ******\n\npublic class LogService{\n    private final ExecutorService exec = Executors.newSingleThreadExecutor();\n    public void stop(){\n        try{\n            exec.shutdown();\n            exec.awaitTermination(timeout,unit);\n        }finally {\n            logWriter.close();\n        }\n    }\n    public void log(String msg){\n        try {\n            exec.execute(new WriteTask(msg));\n        }catch (RejectedExecutionException e){\n            //ignore\n        }\n        \n    }\n}\n")])])]),n("p",[e._v("程序清单7-16中，将管理线程的工作委托给"),n("code",[e._v("ExecutorService")]),e._v("，利用"),n("code",[e._v("ExecutorService")]),e._v("的生命周期方法来实现安全的关闭操作。")]),e._v(" "),n("h3",{attrs:{id:"_2-2-毒丸-对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-毒丸-对象"}},[e._v("#")]),e._v(" 2.2 ”毒丸”对象")]),e._v(" "),n("p",[e._v("还有一种关闭生产者-消费者服务的方式，就是使用毒丸对象。”毒丸”是指一个放在队列上的对象，其含义是：当得到这个对象时，立即停止。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('****** 程序清单7-18 通过"毒丸"对象来关闭服务 ******\n\npublic class Consumer extends Thread{\n    @Override\n    public void run() {\n        try{\n            consume();\n        }finally {\n            while (true){\n                try {\n                    queue.put(POISON);\n                }catch (InterruptedException e){\n                    //重试\n                }\n            }\n        }\n    }\n}\n\npublic class Producer extends Thread{\n    @Override\n    public void run() {\n        try{\n            while (true){\n                Object obj = queue.take();\n                if(obj==POISON)\n                    break;\n                else \n                    produce();\n            }\n        }catch (InterruptedException e){\n            \n        }\n    }\n}\n')])])]),n("p",[e._v("只有在生产者和消费者的数量都已知的情况下，才可以使用毒丸对象，并且生产者和消费者的数量不宜过大，只有在无界队列中，毒丸对象才能可靠的工作。")]),e._v(" "),n("h3",{attrs:{id:"_2-3-shutdownnow的局限性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-shutdownnow的局限性"}},[e._v("#")]),e._v(" 2.3 shutdownNow的局限性")]),e._v(" "),n("p",[e._v("当通过"),n("code",[e._v("shutdownNow")]),e._v("来关闭"),n("code",[e._v("ExecutorService")]),e._v("时，它会尝试取消正在执行的任务并返回所有已提交但尚未开始的任务。可是无法知道是哪些正在执行的任务被取消，如果我们需要备份被取消任务的状态，那么原生的api就无法实现。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("****** 程序清单7-21 在ExecutorService中跟踪在关闭后被取消的任务 ******\n\npublic class TrackingExecutor extends AbstractExecutorService{\n    \n    private final ExecutorService exec;\n    \n    private final Set<Runnable> tasksCancelledAtShutdown = Collections.synchronizedSet(new HashSet<>());\n\n    @Override\n    public void execute(Runnable command) {\n        exec.execute(new Runnable() {\n            @Override\n            public void run() {\n                try{\n                    command.run();\n                }finally {\n                    if(isShutdown() && Thread.currentThread().isInterrupted())\n                        tasksCancelledAtShutdown.add(command);\n                }\n            }\n        });\n    }\n    \n    public List<Runnable> getCancelledTasks(){\n        if(!exec.isTerminated()){\n            throw new IllegalStateException();\n        }\n        return new ArrayList<>(tasksCancelledAtShutdown);\n    }\n}\n")])])]),n("h3",{attrs:{id:"_2-4-守护线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-守护线程"}},[e._v("#")]),e._v(" 2.4 守护线程")]),e._v(" "),n("p",[e._v("线程可以分为两种：普通线程和守护线程。")]),e._v(" "),n("p",[e._v("在jvm启动时创建的所有线程中，除了主线程以外，其他线程都是守护线程。当创建一个新线程时，新线程将继承创建它的线程的守护状态，因此在默认情况下，主线程创建的线程都是普通线程。")]),e._v(" "),n("p",[e._v("应尽可能的少使用守护线程。守护线程通常不会用来替代应用程序管理程序中各个服务的生命周期。")])])}),[],!1,null,null,null);n.default=a.exports}}]);